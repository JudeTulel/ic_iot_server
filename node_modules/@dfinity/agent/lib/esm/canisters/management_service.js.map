{"version":3,"file":"management_service.js","sourceRoot":"","sources":["../../../src/canisters/management_service.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,6DAA6D;AAC7D,aAAa","sourcesContent":["/*\n * This file is generated from the candid for asset management.\n * didc version: 0.4.0\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nimport type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport type bitcoin_address = string;\nexport interface bitcoin_get_balance_args {\n  network: bitcoin_network;\n  address: bitcoin_address;\n  min_confirmations: [] | [number];\n}\nexport type bitcoin_get_balance_result = satoshi;\nexport interface bitcoin_get_current_fee_percentiles_args {\n  network: bitcoin_network;\n}\nexport type bitcoin_get_current_fee_percentiles_result = BigUint64Array | bigint[];\nexport interface bitcoin_get_utxos_args {\n  network: bitcoin_network;\n  filter: [] | [{ page: Uint8Array | number[] } | { min_confirmations: number }];\n  address: bitcoin_address;\n}\nexport interface bitcoin_get_utxos_result {\n  next_page: [] | [Uint8Array | number[]];\n  tip_height: number;\n  tip_block_hash: block_hash;\n  utxos: Array<utxo>;\n}\nexport type bitcoin_network = { mainnet: null } | { testnet: null };\nexport interface bitcoin_send_transaction_args {\n  transaction: Uint8Array | number[];\n  network: bitcoin_network;\n}\nexport type block_hash = Uint8Array | number[];\nexport type canister_id = Principal;\nexport interface canister_info_args {\n  canister_id: canister_id;\n  num_requested_changes: [] | [bigint];\n}\nexport interface canister_info_result {\n  controllers: Array<Principal>;\n  module_hash: [] | [Uint8Array | number[]];\n  recent_changes: Array<change>;\n  total_num_changes: bigint;\n}\nexport type canister_install_mode =\n  | { reinstall: null }\n  | {\n      upgrade:\n        | []\n        | [\n            {\n              wasm_memory_persistence: [] | [{ keep: null } | { replace: null }];\n              skip_pre_upgrade: [] | [boolean];\n            },\n          ];\n    }\n  | { install: null };\nexport interface canister_log_record {\n  idx: bigint;\n  timestamp_nanos: bigint;\n  content: Uint8Array | number[];\n}\nexport interface canister_settings {\n  freezing_threshold: [] | [bigint];\n  controllers: [] | [Array<Principal>];\n  reserved_cycles_limit: [] | [bigint];\n  log_visibility: [] | [log_visibility];\n  wasm_memory_limit: [] | [bigint];\n  memory_allocation: [] | [bigint];\n  compute_allocation: [] | [bigint];\n}\nexport interface canister_status_args {\n  canister_id: canister_id;\n}\nexport interface canister_status_result {\n  status: { stopped: null } | { stopping: null } | { running: null };\n  memory_size: bigint;\n  cycles: bigint;\n  settings: definite_canister_settings;\n  query_stats: {\n    response_payload_bytes_total: bigint;\n    num_instructions_total: bigint;\n    num_calls_total: bigint;\n    request_payload_bytes_total: bigint;\n  };\n  idle_cycles_burned_per_day: bigint;\n  module_hash: [] | [Uint8Array | number[]];\n  reserved_cycles: bigint;\n}\nexport interface change {\n  timestamp_nanos: bigint;\n  canister_version: bigint;\n  origin: change_origin;\n  details: change_details;\n}\nexport type change_details =\n  | {\n      creation: { controllers: Array<Principal> };\n    }\n  | {\n      code_deployment: {\n        mode: { reinstall: null } | { upgrade: null } | { install: null };\n        module_hash: Uint8Array | number[];\n      };\n    }\n  | { controllers_change: { controllers: Array<Principal> } }\n  | { code_uninstall: null };\nexport type change_origin =\n  | { from_user: { user_id: Principal } }\n  | {\n      from_canister: {\n        canister_version: [] | [bigint];\n        canister_id: Principal;\n      };\n    };\nexport interface chunk_hash {\n  hash: Uint8Array | number[];\n}\nexport interface clear_chunk_store_args {\n  canister_id: canister_id;\n}\nexport interface create_canister_args {\n  settings: [] | [canister_settings];\n  sender_canister_version: [] | [bigint];\n}\nexport interface create_canister_result {\n  canister_id: canister_id;\n}\nexport interface definite_canister_settings {\n  freezing_threshold: bigint;\n  controllers: Array<Principal>;\n  reserved_cycles_limit: bigint;\n  log_visibility: log_visibility;\n  wasm_memory_limit: bigint;\n  memory_allocation: bigint;\n  compute_allocation: bigint;\n}\nexport interface delete_canister_args {\n  canister_id: canister_id;\n}\nexport interface deposit_cycles_args {\n  canister_id: canister_id;\n}\nexport type ecdsa_curve = { secp256k1: null };\nexport interface ecdsa_public_key_args {\n  key_id: { name: string; curve: ecdsa_curve };\n  canister_id: [] | [canister_id];\n  derivation_path: Array<Uint8Array | number[]>;\n}\nexport interface ecdsa_public_key_result {\n  public_key: Uint8Array | number[];\n  chain_code: Uint8Array | number[];\n}\nexport interface fetch_canister_logs_args {\n  canister_id: canister_id;\n}\nexport interface fetch_canister_logs_result {\n  canister_log_records: Array<canister_log_record>;\n}\nexport interface http_header {\n  value: string;\n  name: string;\n}\nexport interface http_request_args {\n  url: string;\n  method: { get: null } | { head: null } | { post: null };\n  max_response_bytes: [] | [bigint];\n  body: [] | [Uint8Array | number[]];\n  transform: [] | [{ function: [Principal, string]; context: Uint8Array | number[] }];\n  headers: Array<http_header>;\n}\nexport interface http_request_result {\n  status: bigint;\n  body: Uint8Array | number[];\n  headers: Array<http_header>;\n}\nexport interface install_chunked_code_args {\n  arg: Uint8Array | number[];\n  wasm_module_hash: Uint8Array | number[];\n  mode: canister_install_mode;\n  chunk_hashes_list: Array<chunk_hash>;\n  target_canister: canister_id;\n  store_canister: [] | [canister_id];\n  sender_canister_version: [] | [bigint];\n}\nexport interface install_code_args {\n  arg: Uint8Array | number[];\n  wasm_module: wasm_module;\n  mode: canister_install_mode;\n  canister_id: canister_id;\n  sender_canister_version: [] | [bigint];\n}\nexport type log_visibility = { controllers: null } | { public: null };\nexport type millisatoshi_per_byte = bigint;\nexport interface node_metrics {\n  num_block_failures_total: bigint;\n  node_id: Principal;\n  num_blocks_proposed_total: bigint;\n}\nexport interface node_metrics_history_args {\n  start_at_timestamp_nanos: bigint;\n  subnet_id: Principal;\n}\nexport type node_metrics_history_result = Array<{\n  timestamp_nanos: bigint;\n  node_metrics: Array<node_metrics>;\n}>;\nexport interface outpoint {\n  txid: Uint8Array | number[];\n  vout: number;\n}\nexport interface provisional_create_canister_with_cycles_args {\n  settings: [] | [canister_settings];\n  specified_id: [] | [canister_id];\n  amount: [] | [bigint];\n  sender_canister_version: [] | [bigint];\n}\nexport interface provisional_create_canister_with_cycles_result {\n  canister_id: canister_id;\n}\nexport interface provisional_top_up_canister_args {\n  canister_id: canister_id;\n  amount: bigint;\n}\nexport type raw_rand_result = Uint8Array | number[];\nexport type satoshi = bigint;\nexport interface sign_with_ecdsa_args {\n  key_id: { name: string; curve: ecdsa_curve };\n  derivation_path: Array<Uint8Array | number[]>;\n  message_hash: Uint8Array | number[];\n}\nexport interface sign_with_ecdsa_result {\n  signature: Uint8Array | number[];\n}\nexport interface start_canister_args {\n  canister_id: canister_id;\n}\nexport interface stop_canister_args {\n  canister_id: canister_id;\n}\nexport interface stored_chunks_args {\n  canister_id: canister_id;\n}\nexport type stored_chunks_result = Array<chunk_hash>;\nexport interface uninstall_code_args {\n  canister_id: canister_id;\n  sender_canister_version: [] | [bigint];\n}\nexport interface update_settings_args {\n  canister_id: Principal;\n  settings: canister_settings;\n  sender_canister_version: [] | [bigint];\n}\nexport interface upload_chunk_args {\n  chunk: Uint8Array | number[];\n  canister_id: Principal;\n}\nexport type upload_chunk_result = chunk_hash;\nexport interface utxo {\n  height: number;\n  value: satoshi;\n  outpoint: outpoint;\n}\nexport type wasm_module = Uint8Array | number[];\nexport default interface _SERVICE {\n  bitcoin_get_balance: ActorMethod<[bitcoin_get_balance_args], bitcoin_get_balance_result>;\n  bitcoin_get_current_fee_percentiles: ActorMethod<\n    [bitcoin_get_current_fee_percentiles_args],\n    bitcoin_get_current_fee_percentiles_result\n  >;\n  bitcoin_get_utxos: ActorMethod<[bitcoin_get_utxos_args], bitcoin_get_utxos_result>;\n  bitcoin_send_transaction: ActorMethod<[bitcoin_send_transaction_args], undefined>;\n  canister_info: ActorMethod<[canister_info_args], canister_info_result>;\n  canister_status: ActorMethod<[canister_status_args], canister_status_result>;\n  clear_chunk_store: ActorMethod<[clear_chunk_store_args], undefined>;\n  create_canister: ActorMethod<[create_canister_args], create_canister_result>;\n  delete_canister: ActorMethod<[delete_canister_args], undefined>;\n  deposit_cycles: ActorMethod<[deposit_cycles_args], undefined>;\n  ecdsa_public_key: ActorMethod<[ecdsa_public_key_args], ecdsa_public_key_result>;\n  fetch_canister_logs: ActorMethod<[fetch_canister_logs_args], fetch_canister_logs_result>;\n  http_request: ActorMethod<[http_request_args], http_request_result>;\n  install_chunked_code: ActorMethod<[install_chunked_code_args], undefined>;\n  install_code: ActorMethod<[install_code_args], undefined>;\n  node_metrics_history: ActorMethod<[node_metrics_history_args], node_metrics_history_result>;\n  provisional_create_canister_with_cycles: ActorMethod<\n    [provisional_create_canister_with_cycles_args],\n    provisional_create_canister_with_cycles_result\n  >;\n  provisional_top_up_canister: ActorMethod<[provisional_top_up_canister_args], undefined>;\n  raw_rand: ActorMethod<[], raw_rand_result>;\n  sign_with_ecdsa: ActorMethod<[sign_with_ecdsa_args], sign_with_ecdsa_result>;\n  start_canister: ActorMethod<[start_canister_args], undefined>;\n  stop_canister: ActorMethod<[stop_canister_args], undefined>;\n  stored_chunks: ActorMethod<[stored_chunks_args], stored_chunks_result>;\n  uninstall_code: ActorMethod<[uninstall_code_args], undefined>;\n  update_settings: ActorMethod<[update_settings_args], undefined>;\n  upload_chunk: ActorMethod<[upload_chunk_args], upload_chunk_result>;\n}\nexport declare const idlFactory: IDL.InterfaceFactory;\nexport declare const init: (args: { IDL: typeof IDL }) => IDL.Type[];\n"]}